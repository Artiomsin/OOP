import Foundation

class Document {
    var content: String
    let filename: String

    // –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    static let storageDirectory: URL = URL(fileURLWithPath: "/Users/artem/Downloads/unik/OOP/LR2/Console-based document editor/Console-based document editor")

    init(filename: String, content: String = "") {
        self.filename = filename
        self.content = content
    }

    func save() {
        let filePath = Document.storageDirectory.appendingPathComponent("\(filename).\(self.fileExtension)")

        do {
            try content.write(to: filePath, atomically: true, encoding: .utf8)
            print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \(filePath.path)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: \(error)")
        }
    }

    func open() {
        let filePath = Document.storageDirectory.appendingPathComponent("\(filename).\(self.fileExtension)")

        do {
            content = try String(contentsOf: filePath, encoding: .utf8)
            print("üìÇ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç: \(filename)\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n\(content)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: \(error)")
        }
    }

    func editDocument() {
        var lines = content.split(separator: "\n").map { String($0) }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        func displayContent() {
            print("\nüìÑ –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
            if lines.isEmpty {
                print("   (–ø—É—Å—Ç–æ)")
            } else {
                for (index, line) in lines.enumerated() {
                    print("\(index + 1): \(line)")
                }
            }
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        displayContent()

        while true {
            print("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (`e <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, `d <–Ω–æ–º–µ—Ä>` - —É–¥–∞–ª–∏—Ç—å, `/exit` - –≤—ã–π—Ç–∏): ", terminator: "")
            guard let input = readLine(), !input.isEmpty else { continue }

            if input == "/exit" {
                content = lines.joined(separator: "\n")
                print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                return
            } else if input.starts(with: "d ") {
                let components = input.split(separator: " ")
                if components.count == 2, let lineNumber = Int(components[1]), lineNumber > 0, lineNumber <= lines.count {
                    lines.remove(at: lineNumber - 1)
                    print("üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ \(lineNumber).")
                    displayContent()
                } else {
                    print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `d <–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏>`")
                }
            } else if input.starts(with: "e ") {
                let components = input.split(separator: " ", maxSplits: 2)
                if components.count == 3, let lineNumber = Int(components[1]), lineNumber > 0, lineNumber <= lines.count {
                    lines[lineNumber - 1] = String(components[2])
                    print("‚úè –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ \(lineNumber).")
                    displayContent()
                } else {
                    print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `e <–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>`")
                }
            } else {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–±–∑–∞—Ü
                lines.append(input)
                displayContent()
            }
        }
    }


    func appendContent(newContent: String) {
        content += "\n" + newContent
        print("üìù –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    }

    var fileExtension: String {
        return "txt"
    }
}

