import Foundation

class CLIHandler {
    var currentDocument: Document?

    func start() {
        while true {
            print("\nüñä –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (new/open/edit/save/exit): ", terminator: "")
            guard let input = readLine()?.lowercased() else { continue }

            switch input {
            case "new":
                createNewDocument()
            case "open":
                openExistingDocument()
            case "edit":
                editDocument()  // –ò–∑–º–µ–Ω–∏–ª–∏ –∑–¥–µ—Å—å
            case "save":
                saveDocument()
            case "exit":
                print("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.")
                return
            default:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
            }
        }
    }

    private func createNewDocument() {
        print("üìÑ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ", terminator: "")
        guard let filename = readLine(), !filename.isEmpty else { return }

        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç (plain/markdown/rich): ", terminator: "")
        guard let format = readLine()?.lowercased() else { return }

        let docType: DocumentType
        switch format {
        case "plain":
            docType = .plainText
        case "markdown":
            docType = .markdown
        case "rich":
            docType = .richText
        default:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
            return
        }

        currentDocument = DocumentFactory.createDocument(type: docType, filename: filename)
        print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: \(filename).\(currentDocument!.fileExtension)")
    }

    private func openExistingDocument() {
        print("üìÇ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è: ", terminator: "")
        guard let filename = readLine(), !filename.isEmpty else { return }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (plain/markdown/rich): ", terminator: "")
        guard let format = readLine()?.lowercased() else { return }

        let docType: DocumentType
        switch format {
        case "plain":
            docType = .plainText
        case "markdown":
            docType = .markdown
        case "rich":
            docType = .richText
        default:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
            return
        }

        currentDocument = DocumentFactory.createDocument(type: docType, filename: filename)
        currentDocument?.open()
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ editDocument
    private func editDocument() {
        guard let doc = currentDocument else {
            print("‚ö† –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞!")
            return
        }

        // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ editDocument() –∏–∑ –∫–ª–∞—Å—Å–∞ Document –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        doc.editDocument()
    }

    private func saveDocument() {
        guard let doc = currentDocument else {
            print("‚ö† –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞!")
            return
        }
        doc.save()
    }
}

