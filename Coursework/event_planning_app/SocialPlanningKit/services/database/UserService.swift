import Foundation
import FirebaseFirestore
import FirebaseAuth
import CoreLocation

public class UserService: UserServiceProtocol {
    public  static let shared = UserService()
    private let db = Firestore.firestore()
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
   public func saveUserData(user: FirebaseAuth.User, name: String, email: String, completion: @escaping (Error?) -> Void) {
        print("‚û°Ô∏è [UserService] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å uid: '\(user.uid)'")
        let userRef = db.collection("users").document(user.uid)
        let userData: [String: Any] = [
            "name": name,
            "email": email,
            "photoURL": "0",  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è URL —Ñ–æ—Ç–æ
            "status": "online",  // –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "location": GeoPoint(latitude: 0, longitude: 0),  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
            "personalInformation": "",
            "createdAt": Timestamp(date: Date()),  // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            "arrivedAt": Timestamp(date: Date()),
            "friends": [], // –ú–∞—Å—Å–∏–≤ –¥—Ä—É–∑–µ–π
            "friendRequests": [] // –ú–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        ]
        
        userRef.setData(userData) { error in
            if let error = error {
                print("‚ùå [UserService] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(user.uid)': \(error.localizedDescription)")
            } else {
                print("‚úÖ [UserService] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(user.uid)' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            }
            completion(error)
        }
    }
    
   public func updateUserData(uid: String, data: [String: Any], completion: @escaping (Error?) -> Void) {
        print("üîÑ [UserService] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å uid: '\(uid)', –¥–∞–Ω–Ω—ã–µ: \(data.keys)")
        let userRef = db.collection("users").document(uid)
        userRef.updateData(data) { error in
            if let error = error {
                print("‚ùå [UserService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)': \(error.localizedDescription)")
            } else {
                print("‚úÖ [UserService] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            }
            completion(error)
        }
    }

    public func getUserData(uid: String, completion: @escaping (UserModel?) -> Void) {
        print("üìã [UserService] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å uid: '\(uid)'")
        let userRef = db.collection("users").document(uid)
        userRef.getDocument { snapshot, error in
            if let error = error {
                print("‚ùå [UserService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)': \(error.localizedDescription)")
                completion(nil)
            } else if let document = snapshot, document.exists {
                print("‚úÖ [UserService] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)' —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
                completion(UserModel(document))
            } else {
                print("‚ö†Ô∏è [UserService] –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                completion(nil)
            }
        }
    }
    
   public func getUserIDByEmail(email: String, completion: @escaping (String?) -> Void) {
        print("üîç [UserService] –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: '\(email)'")
        db.collection("users")
            .whereField("email", isEqualTo: email.lowercased())
            .getDocuments { snapshot, error in
                if let error = error {
                    print("‚ùå [UserService] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ email '\(email)': \(error.localizedDescription)")
                    completion(nil)
                } else if let userID = snapshot?.documents.first?.documentID {
                    print("‚úÖ [UserService] –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email '\(email)': uid = '\(userID)'")
                    completion(userID)
                } else {
                    print("‚ö†Ô∏è [UserService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email '\(email)' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    completion(nil)
                }
            }
    }
    
   public func getUserName(userID: String, completion: @escaping (String) -> Void) {
        print("üìã [UserService] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å uid: '\(userID)'")
        db.collection("users").document(userID).getDocument { document, error in
            if let error = error {
                print("‚ùå [UserService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(userID)': \(error.localizedDescription)")
                completion("")
                return
            }

            guard let document = document, document.exists,
                  let name = document.data()?["name"] as? String else {
                print("‚ö†Ô∏è [UserService] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(userID)' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                completion("")
                return
            }

            print("‚úÖ [UserService] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(userID)' –ø–æ–ª—É—á–µ–Ω–æ: '\(name)'")
            completion(name)
        }
    }
    
   public func searchUsersByEmail(query: String, completion: @escaping ([UserModel]) -> Void) {
        print("üîç [UserService] –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email —Å –∑–∞–ø—Ä–æ—Å–æ–º: '\(query)'")
        db.collection("users")
            .whereField("email", isGreaterThanOrEqualTo: query)
            .whereField("email", isLessThanOrEqualTo: query + "\u{f8ff}")
            .getDocuments { snapshot, error in
                if let error = error {
                    print("‚ùå [UserService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email '\(query)': \(error.localizedDescription)")
                    completion([])
                    return
                }

                let users = snapshot?.documents.compactMap { UserModel($0) } ?? []
                print("‚úÖ [UserService] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '\(query)': \(users.count)")
                completion(users)
            }
    }
    
  public func updateUserLocation(uid: String, latitude: Double, longitude: Double, completion: @escaping (Error?) -> Void) {
        print("üìç [UserService] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)' –Ω–∞ (lat: \(latitude), lon: \(longitude))")
        
        let userRef = db.collection("users").document(uid)

        userRef.getDocument { snapshot, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏: \(error.localizedDescription)")
                completion(error)
                return
            }

            guard let document = snapshot, document.exists else {
                print("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å –ª–æ–∫–∞—Ü–∏–µ–π –∏ arrivedAt")
                let newData: [String: Any] = [
                    "location": GeoPoint(latitude: latitude, longitude: longitude),
                    "arrivedAt": Timestamp(date: Date())
                ]
                self.updateUserData(uid: uid, data: newData) { err in
                    if err == nil {
                        print("‚úÖ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –ª–æ–∫–∞—Ü–∏—è —Å arrivedAt –∑–∞–ø–∏—Å–∞–Ω—ã")
                    }
                    completion(err)
                }
                return
            }

            let data = document.data()
            let prevGeo = data?["location"] as? GeoPoint
            print("‚ÑπÔ∏è –°—Ç–∞—Ä–∞—è –ª–æ–∫–∞—Ü–∏—è: \(String(describing: prevGeo))")

            let prevLocation = prevGeo.map { CLLocation(latitude: $0.latitude, longitude: $0.longitude) }
            let newLocation = CLLocation(latitude: latitude, longitude: longitude)
            let distance = prevLocation?.distance(from: newLocation) ?? 1000.0
            print("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏: \(distance) –º")

            let hasMoved = distance > 20
            var updateData: [String: Any] = [
                "location": GeoPoint(latitude: latitude, longitude: longitude)
            ]

            if hasMoved {
                updateData["arrivedAt"] = Timestamp(date: Date())
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è >30–º ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º arrivedAt")
            } else {
                print("üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 30–º ‚Äî arrivedAt –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º")
            }

            self.updateUserData(uid: uid, data: updateData) { err in
                if err == nil {
                    print("‚úÖ –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: \(err!.localizedDescription)")
                }
                completion(err)
            }
        }
    }

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
   public func observeUserNameChanges(uid: String, completion: @escaping (String) -> Void) {
        print("üëÄ [UserService] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)'")
        let userRef = db.collection("users").document(uid)
        
        userRef.addSnapshotListener { documentSnapshot, error in
            if let error = error {
                print("‚ùå [UserService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)': \(error.localizedDescription)")
                return
            }
            
            guard let document = documentSnapshot, document.exists else {
                print("‚ö†Ô∏è [UserService] –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                return
            }
            
            if let name = document.data()?["name"] as? String {
                print("üîÑ [UserService] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)' –æ–±–Ω–æ–≤–ª–µ–Ω–æ: '\(name)'")
                completion(name)  // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è
            } else {
                print("‚ö†Ô∏è [UserService] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(uid)' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
            }
        }
    }
}

