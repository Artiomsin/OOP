import FirebaseFirestore
import CoreLocation

public class FriendService: FriendServiceProtocol {
   public static let shared = FriendService()
    private let db = Firestore.firestore()

    public func sendFriendRequest(fromUserID: String, toUserID: String, completion: @escaping (Error?) -> Void) {
        print("‚û°Ô∏è [FriendService] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è –æ—Ç '\(fromUserID)' –∫ '\(toUserID)'")
        let requestRef = db.collection("friend_requests").document("\(fromUserID)_\(toUserID)")
        let requestData: [String: Any] = [
            "fromUserID": fromUserID,
            "toUserID": toUserID,
            "status": "pending",
            "timestamp": Timestamp(date: Date())
        ]
        
        requestRef.setData(requestData) { error in
            if let error = error {
                print("‚ùå [FriendService] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è: \(error.localizedDescription)")
            } else {
                print("‚úÖ [FriendService] –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç '\(fromUserID)' –∫ '\(toUserID)'")
            }
            completion(error)
        }
    }
    
  public func acceptFriendRequest(fromUserID: String, toUserID: String, completion: @escaping (Error?) -> Void) {
        print("‚úÖ [FriendService] –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è: –æ—Ç '\(fromUserID)' –∫ '\(toUserID)'")
        let batch = db.batch()
        
        let userRef1 = db.collection("users").document(fromUserID)
        let userRef2 = db.collection("users").document(toUserID)
        let requestRef = db.collection("friend_requests").document("\(fromUserID)_\(toUserID)")
        
        batch.updateData(["friends": FieldValue.arrayUnion([toUserID])], forDocument: userRef1)
        batch.updateData(["friends": FieldValue.arrayUnion([fromUserID])], forDocument: userRef2)
        batch.deleteDocument(requestRef)
        
        batch.commit { error in
            if let error = error {
                print("‚ùå [FriendService] –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: \(error.localizedDescription)")
            } else {
                print("‚úÖ [FriendService] –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—Ç–∞–ª–∏ –¥—Ä—É–∑—å—è–º–∏")
            }
            completion(error)
        }
    }
    
    public  func declineFriendRequest(fromUserID: String, toUserID: String, completion: @escaping (Error?) -> Void) {
        print("üö´ [FriendService] –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è: –æ—Ç '\(fromUserID)' –∫ '\(toUserID)'")
        let requestRef = db.collection("friend_requests").document("\(fromUserID)_\(toUserID)")
        requestRef.delete { error in
            if let error = error {
                print("‚ùå [FriendService] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: \(error.localizedDescription)")
            } else {
                print("‚úÖ [FriendService] –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            }
            completion(error)
        }
    }
    
    public func removeFriend(userID: String, friendID: String, completion: @escaping (Error?) -> Void) {
        print("üîÑ [FriendService] –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–∑–µ–π: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '\(userID)' —É–¥–∞–ª—è–µ—Ç '\(friendID)'")
        let userRef1 = db.collection("users").document(userID)
        let userRef2 = db.collection("users").document(friendID)
        
        let batch = db.batch()
        batch.updateData(["friends": FieldValue.arrayRemove([friendID])], forDocument: userRef1)
        batch.updateData(["friends": FieldValue.arrayRemove([userID])], forDocument: userRef2)
        
        batch.commit { error in
            if let error = error {
                print("‚ùå [FriendService] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–∑–µ–π: \(error.localizedDescription)")
            } else {
                print("‚úÖ [FriendService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '\(friendID)' —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(userID)'")
            }
            completion(error)
        }
    }
    
    public func getFriendsList(userID: String, completion: @escaping ([String]) -> Void) {
        print("üìã [FriendService] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(userID)'")
        db.collection("users").document(userID).getDocument { snapshot, error in
            if let error = error {
                print("‚ùå [FriendService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π: \(error.localizedDescription)")
                completion([])
                return
            }
            
            if let data = snapshot?.data() {
                let friends = data["friends"] as? [String] ?? []
                print("‚úÖ [FriendService] –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—É—á–µ–Ω, –≤—Å–µ–≥–æ: \(friends.count)")
                completion(friends)
            } else {
                print("‚ö†Ô∏è [FriendService] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(userID)' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                completion([])
            }
        }
    }
    
    public func observeFriendRequests(userID: String, completion: @escaping ([String]) -> Void) {
        print("üëÄ [FriendService] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(userID)'")
        db.collection("friend_requests")
            .whereField("toUserID", isEqualTo: userID)
            .whereField("status", isEqualTo: "pending")
            .addSnapshotListener { snapshot, error in
                if let error = error {
                    print("‚ùå [FriendService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∑–∞—è–≤–∫–∏: \(error.localizedDescription)")
                    completion([])
                    return
                }
                
                if let documents = snapshot?.documents {
                    let requests = documents.compactMap { $0.data()["fromUserID"] as? String }
                    print("üì• [FriendService] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: \(requests.count)")
                    completion(requests)
                } else {
                    print("‚ö†Ô∏è [FriendService] –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
                    completion([])
                }
            }
    }
    
    public func observeFriendsChanges(userID: String, completion: @escaping ([String]) -> Void) {
        print("üëÄ [FriendService] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(userID)'")
        let userRef = db.collection("users").document(userID)
        userRef.addSnapshotListener { snapshot, error in
            if let error = error {
                print("‚ùå [FriendService] –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥—Ä—É–∑–µ–π: \(error.localizedDescription)")
                completion([])
                return
            }
            
            if let data = snapshot?.data() {
                let friends = data["friends"] as? [String] ?? []
                print("üîÑ [FriendService] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π, –Ω–∞–π–¥–µ–Ω–æ: \(friends.count)")
                completion(friends)
            } else {
                print("‚ö†Ô∏è [FriendService] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '\(userID)' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–∑–µ–π")
                completion([])
            }
        }
    }
    
    public func getFriendsLocations(friendIDs: [String], completion: @escaping ([FriendLocation]) -> Void) {
        print("üìç [FriendService] –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –¥—Ä—É–∑–µ–π: \(friendIDs)")
        guard !friendIDs.isEmpty else {
            print("‚ö†Ô∏è [FriendService] –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø—É—Å—Ç, –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è")
            completion([])
            return
        }

        db.collection("users").whereField(FieldPath.documentID(), in: friendIDs).getDocuments { snapshot, error in
            if let error = error {
                print("‚ùå [FriendService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π: \(error.localizedDescription)")
                completion([])
                return
            }
            
            guard let documents = snapshot?.documents else {
                print("‚ö†Ô∏è [FriendService] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–∫–∞—Ü–∏–π –¥—Ä—É–∑–µ–π")
                completion([])
                return
            }

            let locations = documents.compactMap { doc -> FriendLocation? in
                guard let name = doc.data()["name"] as? String,
                      let geoPoint = doc.data()["location"] as? GeoPoint else {
                    print("‚ö†Ô∏è [FriendService] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –¥—Ä—É–≥–∞ —Å id \(doc.documentID)")
                    return nil
                }
                // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è (arrivedAt), –µ—Å–ª–∏ –µ—Å—Ç—å
                            let arrivedTimestamp = doc.data()["arrivedAt"] as? Timestamp
                            let arrivedAtDate = arrivedTimestamp?.dateValue()
                
                return FriendLocation(
                    id: doc.documentID,
                    name: name,
                    coordinate: CLLocationCoordinate2D(latitude: geoPoint.latitude, longitude: geoPoint.longitude),
                    arrivedAt: arrivedAtDate
                )
            }
            print("‚úÖ [FriendService] –ü–æ–ª—É—á–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π –¥—Ä—É–∑–µ–π: \(locations.count)")
            completion(locations)
        }
    }
}

