import SwiftUI
import MapKit
import CoreLocation
import FirebaseAuth
import FirebaseFirestore

struct HomeContentView: View {
    @StateObject private var locationManager = LocationManager.shared
    @State private var userName: String = "User"
    @State private var cameraPosition = MapCameraPosition.region(MKCoordinateRegion(
        center: CLLocationCoordinate2D(latitude: 53.9006, longitude: 27.5590), // –ú–∏–Ω—Å–∫
        span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
    ))
    
    private var firestoreService = FirestoreService.shared

    var body: some View {
        VStack {
            Map(position: $cameraPosition) {
                
                // üìç **–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
                if let location = locationManager.currentLocation {
                    let userIsNearFriend = isUserNearbyAnyFriend()
                    
                    Annotation(userName, coordinate: location) {
                        Circle()
                            .fill(userIsNearFriend ? Color.green : Color.red) // ‚úÖ –¢–µ–ø–µ—Ä—å –∫—Ä–∞—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–µ–ª–µ–Ω—ã–π, –µ—Å–ª–∏ —Ä—è–¥–æ–º –¥—Ä—É–≥
                            .frame(width: 14, height: 14)
                            .overlay(
                                Circle()
                                    .stroke(Color.white, lineWidth: 2)
                            )
                    }
                }

                // üìç **–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π**
                ForEach(locationManager.friendsLocations) { friend in
                    Annotation(friend.name, coordinate: friend.coordinate) {
                        Circle()
                            .fill(isNearby(friend.coordinate) ? Color.green : Color.blue) // ‚úÖ –ó–µ–ª—ë–Ω—ã–π, –µ—Å–ª–∏ –≤ —Ä–∞–¥–∏—É—Å–µ 16 –º
                            .frame(width: 12, height: 12)
                            .overlay(
                                Circle()
                                    .stroke(Color.white, lineWidth: 2)
                            )
                    }
                }
            }
            .frame(height: 500) // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç—ã
            .cornerRadius(20)
            .padding()
        }
        .onAppear {
            guard let currentUser = Auth.auth().currentUser else { return }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            firestoreService.observeUserNameChanges(uid: currentUser.uid) { updatedName in
                self.userName = updatedName
            }
            
            // –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫—É –¥—Ä—É–∑–µ–π
            locationManager.startLocationUpdates()
            locationManager.loadFriendsLocations()
        }
    }
    
    /// **–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –¥—Ä—É–≥ –≤ —Ä–∞–¥–∏—É—Å–µ 16 –º–µ—Ç—Ä–æ–≤**
    private func isNearby(_ friendLocation: CLLocationCoordinate2D) -> Bool {
        guard let userLocation = locationManager.currentLocation else { return false }
        
        let userCLLocation = CLLocation(latitude: userLocation.latitude, longitude: userLocation.longitude)
        let friendCLLocation = CLLocation(latitude: friendLocation.latitude, longitude: friendLocation.longitude)

        let distance = userCLLocation.distance(from: friendCLLocation) // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
        print("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –¥—Ä—É–≥–∞ \(distance) –º")

        return distance <= 30 // –ï—Å–ª–∏ –¥—Ä—É–≥ –±–ª–∏–∂–µ 16 –º–µ—Ç—Ä–æ–≤ ‚Äî –æ–∫—Ä–∞—à–∏–≤–∞–µ–º –≤ –∑–µ–ª—ë–Ω—ã–π
    }
    
    /// **–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ä—è–¥–æ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥—Ä—É–≥**
    private func isUserNearbyAnyFriend() -> Bool {
        for friend in locationManager.friendsLocations {
            if isNearby(friend.coordinate) {
                return true
            }
        }
        return false
    }
}



/*import SwiftUI
 import MapKit
 import CoreLocation
 import FirebaseAuth
 import FirebaseFirestore

 struct HomeContentView: View {
     @StateObject private var locationManager = LocationManager.shared
     @State private var userName: String = "User"
     @State private var cameraPosition = MapCameraPosition.region(MKCoordinateRegion(
         center: CLLocationCoordinate2D(latitude: 53.9006, longitude: 27.5590), // –ú–∏–Ω—Å–∫
         span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
     ))
     private var firestoreService = FirestoreService.shared
     var body: some View {
         VStack {
             Map(position: $cameraPosition) {
                 // –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                 if let location = locationManager.currentLocation {
                     Annotation(userName, coordinate: location) {
                         Circle()
                             .fill(Color.red)
                             .frame(width: 12, height: 12)
                             .overlay(
                                 Circle()
                                     .stroke(Color.white, lineWidth: 2)
                             )
                     }
                 }
             }
             .frame(height: 500) // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç—ã
             .cornerRadius(20)
             .padding()
         }
         .onAppear {
             guard let currentUser = Auth.auth().currentUser else { return }
                        firestoreService.observeUserNameChanges(uid: currentUser.uid) { updatedName in
                            self.userName = updatedName // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ Firestore
                        }
             locationManager.startLocationUpdates()
             print("Attempting to load 'default.csv'...")
         }
     }
 }
*/
